=== 参加人员 ===
王程程  黄文文  李婷婷  陶晓鸣  刘炯  霍琦  戎祥  何茂森  董飞  李洋

=== 第5章 软件构建中的设计（王程程 霍琪）===
====5.1-5.2（王程程）====
====5.3-5.5（霍琪）====
=== 第6章 可以工作的类（李洋 陶晓明）===
====6.1-6.3（李洋）====
====6.4-6.5（陶晓鸣）====
=== 第7章 高质量的子程序（刘炯 黄文文 董飞）===
====7.1-7.2（刘炯）====
====7.3-7.4（陶晓鸣）====
====7.5-7.7（董飞）====
=== 第8章 防御式编程（戎祥 何茂森 李婷婷）===
====8.1-8.3（戎祥）====

*断言的心得
断言在使用的时候所需要注意的有以下几点

1.用错误处理代码赖处理预期会发生的情况，用断言处理绝不应该发生的情况

2.避免把需要执行的代码放到断言中，例如：

*'''''坏代码'''''

<pre>
Debug.Assert(PerformAction() ) ' Couldn't perform action
</pre>

*'''''好代码'''''

<pre>
actionPerformed = PerformAction()

Debug.Assert(actionPerformed) ' Couldn't perform action
</pre>

----------------------------------------------------------------------------------------------------------
*错误处理技术的心得

上诉断言是用来处理代码中不应该发生的错误，而下列的方法是用来处理预料中可能要发生的错误：

1.返回中立值

2.换用下一个正确的数据

3.返回与前次相同的数据

4.还用最接近的合法值

5.返回一个错误码

====8.4-8.5（李婷婷）====
====8.6-8.8（何茂森）====

=====8.6 辅助调试代码（何茂森）=====
======1.尽早引入辅助调试的代码。======
在程序开发的前期，越早引入辅助调试的代码，其能够提供的帮助也就越大。
======2.计划移除调试辅助的代码。======
例如C++的开发环境中，使用预处理器来控制调试用的代码：
<pre>
#define DEBUG
...
#if defined(DEBUG)
// 调试代码
...
#end if
</pre>
======3.编写自己的预处理器。======
如果某种语言没有包含一个预处理器，可以自己去写一个用于包含或排除调试代码的预处理器。例如JAVA里可以写一个预编译器来处理//#BEGIN DEBUG和//#END DEBUG等关键字


=====8.7确定在产品代码中该保留多少防御式代码心得（何茂森）=====
======1.保留检查重要错误的代码======
重要的错误往往会引发软件的重大事故，需要重点关注，对于这部分错误需要着着重关注，此部分检查错误的代码也应保留下来一应对后续出现的问题。

======2.去掉检查细微错误的代码======
某些错误可能对整个软件几乎没有影响，或者是影响微乎其微，对于这种错误的检查代码可以不用保留在工程内部，以减少工程代码的冗余。

======3.去掉可能导致程序硬性崩溃的代码======
程序开发阶段可以允许有错误，也可以允许有引起程序硬性崩溃的代码，但是当程序走向产品的时候，不允许有这样的代码出现，必须将其移除程序之内。

======4.保留可以让程序稳妥崩溃的代码======
 如果你的程序里有能够检测出潜在严重错误的代码，那么可以保留某些可以让程序稳妥崩溃的代码，这些代码在程序的后期能够给开发者提供某些关键信息，以改善程序，使得后续的程序可以获得更高的质量。
======5.为技术支持人员纪录错误信息======
可以考虑在产品代码中保留一些辅助调试代码，这些代码能够帮助技术人员纪录错误信息，使最终产品有更好的质量。


