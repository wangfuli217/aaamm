=== 参加人员 ===
邵志超  王西亚  徐超  段宗超  闫玲玲  徐钰颖  范子高  肖秀丽  葛川川  钟红飞  李勇  甘建伟  赵明月

=== 第10章 使用变量的一般事项（邵志超）===
====xxxxxxx心得====
心得1的详细说明YYYYYYYYYYYYYYYYYYYY
====xxxxxx心得2====
心得2的详细说明YYYYYYYYYYYYYYYYYYYY



=== 第11章 变量名的力量（王西亚）===
====xxxxxxx心得====
心得1的详细说明YYYYYYYYYYYYYYYYYYYY
====xxxxxx心得2====
心得2的详细说明YYYYYYYYYYYYYYYYYYYY



===第12章 基本的数据类型 （徐钰颖）===
====数值概论心得====
1使用数的时候要避免使用“神秘数值",就是没有经过定义的数字。
*它会使修改变得更可靠，就是不会让你漏掉某个数值。
*会让修改变得容易，当你修改数字时如果你用了神秘数值你就需要把它全部找出来，如果你用了具名常量，只需要改一下该常量的定义即可。
2预防除零错误，就是写代码的时候要考虑分母是否可能为0，防止错误的发生。
3避免混合类型的比较（比如浮点数和整数),要自己手动进行类型转换，你也会准确的知道比较的是什么了。
4最后还要注意编译器的警告，当你写代码的时候出错时，通过编译器警告来发现问题要比你自己找容易的多。
====整数心得====
在用整数的时候要注意以下三点。
*检查整数除法，当你使用整数的时候，其结果会随语言的不同而不同，比如10*（9/10）=（10*9）/10=9。但在整数运算是10*（9/10）=0，因为整数除法9/10等于0。此类问题的解决方法就是重新安排表达式的数序。
*检查整数溢出，在做整数的乘法和加法时，要考虑最大整数，每个整数类型的取值范围不同，32位的计算机和64位的也是不同的。
*检查中间结果的溢出，就是检查每个整数的最大值，就比如A*B/C,如果A和B都是最大值，A*B的结果就已经溢出了，从而导致结果也是错误的。




===第13章 不常见的数据类型===

====13.3 全局数据(范子高)====
全局数据区别于类中的全局变量。
=====全局数据的常用问题=====
*1.在对数据进行操作时会无意间进行全局数据的操作，但是以为全局数据不会改变。
*2.在使用别名时，实际上全局数据和别名所指向的使用一个数据。在例子中输入为全局变量进行输出时，inputVar被初始化为0，操作后赋值给全局数据globalVar，所以在输出前两个值均为5。原因在于你是用的别名和输入的全局数据名一样。
*3.在多线程程序大量出现的情况下，出现了全局数据如果在多个子程序中进行使用，那么一旦对数据进行了更改，那么原来的程序所要表达的方法将会改变。
*4.全局数据将会加大代码重写的难度，在你重写程序时，会出现是否依旧使用全局数据的难题，如果选择继续使用，那么在你以后每一次对这个程序进行重写的过程中你都需要使用全局数据，另一种方法就是把需要的数据以不适用全局数据的方式表示出来。
*5.全局数据的加载实在程序开始运行时就进行加载了，那么就出现了问题，如果在一个程序中使用了其他程序中的全局数据，那么如何决定全局数据加载的顺序。
*6.全局数据破坏了代码的模块化设计，在模块化设计中就是要减少代码的耦合，而全局数据的使用与这个思想相违背。
=====全局数据的缺点=====
*1.用于保存全局数值，在整个程序中都不进行修改操作，只对其数值进行读取。
*2.用于模拟具名常量，类似于java中用final修饰的常量。
*3.用于模拟枚举类型，将一个对象中的所有数据逗列举出来。
*4.可以简化对于一个常用数据的使用，在对于一个数据频繁使用的时候，把它定义为全局数据，将它为数不多的使用子程序集中在一起，可以方便进行维护。
*5.用于消除流浪数据，我的理解是类似与java中的exception message，在所有的方法中都可能出现message，但是不一定在每一个都会抛出exception，所以将它定义为全局数据，在所有的子程序中都可以使用，不会因为不使用而没有意义。
